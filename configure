#!/usr/bin/env python3

# Usage example: ./configure --caf:with-log-level=trace --all:enable-asan

import sys, re, os, shutil, json

from subprocess import call, check_call

# get current workspace directory
workspace = os.path.dirname(os.path.realpath(__file__))

# read settings
settings = json.load(open(workspace + '/settings.json'))
deps = settings.get('dependencies', {})
forced_flags = settings.get('forced-flags', {})
in_source_build = settings.get('in-source-build', False)
cmake_cmd = settings.get("cmake-cmd", "cmake")

# check for optional Ninja flags
ninja_flags = []
if os.path.isfile('ninja_flags.txt'):
    with open('ninja_flags.txt') as f:
        ninja_flags = f.read().strip().split()

# build debug by default
build_type = "debug"

# configures whether we run in test mode
dry_run = False

# configures whether we delete existing build directories
clean_slate = False

# returns the absolute build path for a project
def abs_build_path(name):
 if in_source_build:
   return os.path.join(workspace, 'project', name, 'build', build_type)
 else:
   return os.path.join(workspace, 'build', name, build_type)

def abs_install_dir(name):
  return os.path.join(workspace, 'local', build_type)

def read_flags(name):
  flags_key = 'flags.{}.{}'.format(name, build_type)
  if not flags_key in settings:
    try:
      idx = ['debug', 'release', 'relwithdebinfo', 'minsizerel'].index(build_type.lower())
      cmake_build_types = ['Debug', 'Release', 'RelWithDebInfo', 'MinSizeRel']
      settings[flags_key] = {'CMAKE_BUILD_TYPE': cmake_build_types[idx]}
    except:
      print('could not find {} in your settings.json'.format(flags_key))
      exit()
  return settings[flags_key]

# invokes ./configure script of the project
def config_project(name, cfg):
  build_dir = abs_build_path(name)
  cli = [cmake_cmd,
         cfg['cmake-root'],
         '-G', 'Ninja',
         '-DCMAKE_INSTALL_PREFIX={}'.format(abs_install_dir(name))]
  flags = read_flags(name)
  if 'flags' in cfg:
    flags.update(cfg['flags'])
  flags.update(forced_flags)
  for key, val in flags.items():
    cli.append('-D{}={}'.format(key, val))
  prefix = abs_install_dir(name)
  if os.path.isdir(build_dir):
    if clean_slate and not dry_run:
      print('>>> remove outdated build directory: ' + build_dir)
      shutil.rmtree(build_dir)
  print('>>> call: ' + ' '.join(cli))
  if not dry_run:
    if not os.path.isdir(build_dir):
      os.makedirs(build_dir)
    check_call(cli, cwd=build_dir)

# builds the project via ninja
def build_project(name, cfg):
  cmd = ["ninja", "-C", abs_build_path(name)] + ninja_flags
  print('>>> call: ' + str(cmd))
  if not dry_run:
    check_call(cmd)

def cmake_root(proj_name):
  dirs = [
    os.path.join(workspace, proj_name),
    os.path.join(workspace, proj_name, 'src'),
    os.path.join(workspace, 'project', proj_name),
    os.path.join(workspace, 'project', proj_name, 'src'),
  ]
  for x in dirs:
    if os.path.isfile(os.path.join(x, 'CMakeLists.txt')):
      return x
  raise RuntimeError('no CMakeLists.txt found in expected locations for {}'.format(proj_name))

def rd(xs, key):
  if not key in xs:
    xs[key] = {}
  return xs[key]

def cmake_dep_var(name):
  fallback = '{}_ROOT'.format(name.upper().replace('-', '_'))
  cmake_names = settings.get('cmake-names', {})
  return cmake_names.get(name, fallback)

def process_project(name, cfg, xs, as_depdency):
  print('>>> process ' + name)
  # build dependencies first
  dep_dirs = []
  if name in deps:
    for dep in deps[name]:
      print('>>> resolve depdency of ' + name + ': ' + dep)
      if not dep in xs:
        xs[dep] = {
          'build': False,
          'configured': False,
          'cmake-root': cmake_root(dep),
        }
      process_project(dep, xs[dep], xs, True)
      flags = rd(cfg, 'flags')
      dep_dirs.append(abs_build_path(dep))
      flags[cmake_dep_var(dep)] = abs_build_path(dep)
  if dep_dirs:
      flags['CMAKE_PREFIX_PATH'] = ';'.join(dep_dirs)
  if not cfg['configured']:
    print('>>> configure ' + name)
    config_project(name, cfg)
    cfg['configured'] = True
  if as_depdency and not cfg['build']:
    print('>>> build ' + name)
    build_project(name, cfg)
    cfg['build'] = True

def process_projects(xs):
  for name, cfg in xs.copy().items():
    process_project(name, cfg, xs, False)

def print_help_text():
  print('configure [--dry-run] [--build-type=STR] [--delete-old-builds] PROJECTS...')
  exit()

if __name__ == "__main__":
  options = {}
  # our default pattern extracts the project name (group 1) and
  # project-specific options (group 2)
  pattern = re.compile("--([a-z]+):(.+)")
  # parse CLI arguments
  projects = {}
  for arg in sys.argv[1:]:
    rxres = pattern.match(arg)
    if arg == '-h' or arg == '--help':
      print_help_text()
    elif arg == '--dry-run':
      dry_run = True
    elif arg == '--delete-old-builds':
      clean_slate = True
    elif rxres != None:
      project = rxres.group(1)
      opt = "--" + rxres.group(2)
      # add options prefixed with '--all:...' to all projects
      if project == "all":
        for key in options:
          options[key].append(opt)
      else:
        options[project].append(opt)
    elif arg.startswith('--build-type='):
      build_type = arg[13:]
    else:
      proj_root = cmake_root(arg)
      if arg in projects:
        projects[arg]['cmake-root'] = os.path.join(workspace, proj_root)
      else:
        projects[arg] = {'cmake-root': os.path.join(workspace, proj_root)}
  # initialize config for loaded settings
  for name, cfg in projects.items():
    if not 'cmake-root' in cfg:
      print('flags were passed to {} but its not listed as project to build'.format(flags_key))
      exit()
    cfg['build'] = False
    cfg['configured'] = False
  # configure and build recursively
  process_projects(projects)
