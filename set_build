#!/usr/bin/env python

import sys, os, json

# get current workspace directory
workspace = os.path.dirname(os.path.realpath(__file__))

# fetch the dependencies from the settings file
settings = json.load(open(workspace + '/settings.json'))
deps = settings['dependencies']

def resolve_dependencies(name):
  # build dependency list
  all_deps = []
  for dep in deps.get(name, []):
    all_deps.extend(resolve_dependencies(dep))
  # de-duplicate dependencies
  result = []
  for dep in all_deps:
    if not dep in result:
      result.append(dep)
  result.append(name)
  return result

def main():
  build_type = sys.argv[1]
  # convenience variables
  buildSuffix = '/build/' + build_type
  dbSuffix = buildSuffix + '/compile_commands.json'
  target_suffix = lambda target : '/build/' + build_type + ' ' + target
  # compute full build order including dependencies
  build_order = resolve_dependencies(sys.argv[2])
  # check for optional Ninja flags
  user_flags = ''
  if os.path.isfile('ninja_flags.txt'):
      with open('ninja_flags.txt') as f:
          user_flags = f.read().strip()
  # write workspaces Makefile
  with open('Makefile', 'w') as f:
    f.write('all:\n\t')
    f.write(' && '.join('ninja {} -C {}{}'.format(user_flags, x, buildSuffix) for x in build_order))
    f.write('\n')
    for target in ['clean', 'install']:
      f.write(target + ':\n\t')
      f.write(' && '.join('ninja -C {}{}'.format(x, target_suffix(target)) for x in build_order))
      f.write('\n')
  # read all compile databases into a single one
  db = []
  for lst in (json.load(open(x + dbSuffix)) for x in build_order):
    db.extend(lst)
  json.dump(db, open(workspace + '/compile_commands.json', 'w'), indent = 2)

if __name__ == "__main__":
  main()
