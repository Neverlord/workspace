#!/usr/bin/env python

import sys, os, json, subprocess

# get current workspace directory
workspace = os.path.dirname(os.path.realpath(__file__))

# fetch the dependencies from the settings file
settings = json.load(open(workspace + '/settings.json'))
deps = settings.get('dependencies', {})
in_source_build = settings.get('in-source-build', False)
makefile_in_subdir = settings.get('makefile-in-subdir', False)
build_program = settings.get('build-program', 'ninja')
build_flags = settings.get('build-flags', '')

def resolve_dependencies(name):
  # build dependency list
  all_deps = []
  for dep in deps.get(name, []):
    all_deps.extend(resolve_dependencies(dep))
  # de-duplicate dependencies
  result = []
  for dep in all_deps:
    if not dep in result:
      result.append(dep)
  result.append(name)
  return result

def main():
  # convenience variables
  build_type = sys.argv[1]
  proj = sys.argv[2]
  # string factories
  build_fmt =  '{}/build/{}' if in_source_build else 'build/{}/{}'
  build_dir = lambda x: build_fmt.format(x, build_type)
  abs_build_dir = lambda x: '{}/{}'.format(workspace, build_dir(x))
  make_cmd = lambda x: '{} {} -C {}'.format(build_program, build_flags, abs_build_dir(x))
  # compute full build order including dependencies
  proj_deps = list(filter(lambda x: x != proj, resolve_dependencies(proj)))
  # get all targets
  not_reserved = lambda target : not target in ['all', 'clean', 'install']
  is_phony = lambda line : ': phony' in line
  drop_phony = lambda line : line[0 : len(line) - len(': phony')].strip()
  proc_out = subprocess.check_output([build_program, '-C', build_dir(proj), 'help'])
  targets = list(filter(not_reserved, map(drop_phony, filter(is_phony, proc_out.split('\n')))))
  # write Makefile
  if makefile_in_subdir:
    makefile_path = os.path.join(workspace, proj, 'Makefile')
  else:
    makefile_path = os.path.join(workspace, 'Makefile')
  with open(makefile_path, 'w') as f:
    f.write('all: wsProjDepsTarget\n')
    f.write('\t{}\n'.format(make_cmd(proj)))
    f.write('\n')
    if not proj_deps:
      f.write('wsProjDepsTarget: ;\n')
    else:
      f.write('wsProjDepsTarget:\n')
      for dep in proj_deps:
        f.write('\t{}\n'.format(make_cmd(dep)))
    f.write('\n')
    for target in targets + ['clean', 'install', 'help']:
      f.write('{}: wsProjDepsTarget\n'.format(target))
      f.write('\t{} {}\n'.format(make_cmd(proj), target))
      f.write('\n')
  # read all compile databases into a single one
  db = []
  for lst in (json.load(open(build_dir(x) + '/compile_commands.json')) for x in proj_deps + [proj]):
    db.extend(lst)
  json.dump(db, open(workspace + '/compile_commands.json', 'w'), indent = 2)

if __name__ == "__main__":
  main()
