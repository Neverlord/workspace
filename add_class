#!/usr/bin/env python

# Usage:
# add_class [-H|-C|-U] QUALIFIED-NAME
# Options:
# -H   No header
# -C   No class File
# -U   No unit test

# Usage example:
# - Header, class, and test: add_class.py libvast vast::system::foo
# - Header and test: add_class.py -o libvast vast::system::foo

import argparse, sys, os, imp

# get current workspace directory
if '__file__' in locals() or '__file__' in globals():
    workspace = os.path.dirname(os.path.realpath(__file__))
else:
    workspace = os.getcwd()

def read_tpl(project):
    base = os.path.join(workspace, '.tpl', project)
    if not os.path.isdir(base):
        raise Exception('No template found under ' + base)
    tpls={}
    for entry in ['copyright', 'header', 'source', 'test']:
        with open(os.path.join(base, entry), 'r') as f:
            tpls[entry] = f.read()
    return tpls

def parse_set_cmd(f, new_entry):
    entries = set()
    for line_with_newline in f:
        line = line_with_newline.rstrip()
        # Compute indentation on the first line.
        if not entries:
            indentation = ' ' * (len(line) - len(line.lstrip()))
            entries.add(indentation + new_entry)
        if line == ')':
            result = list(entries)
            result.sort()
            result.append(')')
            return result
        elif line == '':
            pass
        elif line[-1] == ')':
            entries.add(line[:-1])
            result = list(entries)
            result.sort()
            result[-1] += ')'
            return result
        else:
            entries.add(line)
    raise Exception("format error in CMakeLists.txt: no closing ')' to set(")

def extend_cmake_impl(cmake_settings, cmake_file, source_begin_marker, test_begin_marker):
    lines=[]
    added_source_file = False
    added_test_suite = False
    # Read old content from file.
    with open(cmake_file, 'r') as f:
        for line_with_newline in f:
            line = line_with_newline[:-1]
            lines.append(line)
            if source_begin_marker != '' and source_begin_marker in line:
                added_source_file = True
                lines += parse_set_cmd(f, cmake_settings['source_path'])
            elif test_begin_marker != '' and test_begin_marker in line:
                added_test_suite = True
                lines += parse_set_cmd(f, cmake_settings['test_suite'])
    # Write new content to file.
    with open(cmake_file, 'w') as f:
        for line in lines:
            f.write(line)
            f.write('\n')
    # Check whether all settings had an effect.
    if source_begin_marker != '' and not added_source_file:
        print('*** could not add source file for marker: {}'.format(source_begin_marker))
    if test_begin_marker != '' and not added_source_file:
        print('*** could not test suite for marker: {}'.format(test_begin_marker))

def extend_cmake(cmake_settings, generate_source, generate_test):
    if not generate_source and not generate_test:
        return
    source_begin_marker = ''
    if generate_source:
        source_begin_marker = cmake_settings['source_begin_marker']
    test_begin_marker = ''
    if generate_test and 'test_begin_marker' in cmake_settings:
        test_begin_marker = cmake_settings['test_begin_marker']
    if 'test_file' in cmake_settings:
        if source_begin_marker != '':
            extend_cmake_impl(cmake_settings, cmake_settings['file'], source_begin_marker, '')
        if test_begin_marker != '':
            extend_cmake_impl(cmake_settings, cmake_settings['test_file'], '', test_begin_marker)
    else:
        extend_cmake_impl(cmake_settings, cmake_settings['file'], source_begin_marker, test_begin_marker)

def make_file(file_path, copyright, tpl, replacements):
    # Make sure directory exists.
    dirname = os.path.dirname(file_path)
    if not os.path.isdir(dirname):
        os.makedirs(os.path.dirname(file_path))
    # Create file and write content if it does not exist yet.
    if os.path.isfile(file_path):
        print('*** file {} already exists'.format(file_path))
    else:
        with open(file_path, 'w') as f:
            f.write(copyright)
            f.write(tpl % replacements)

def guess_project(qualified_name):
    suffix_end = qualified_name.index('::')
    top_level = qualified_name[:suffix_end]
    return top_level

# Generates a header plus source file for a class as well as a unit test.
def generate_from_name(generate_header, generate_source, generate_test,
                       component, qualified_name):
    # Extract the project from the given name.
    project = guess_project(qualified_name)
    # Load the template module for that project.
    mod_path = os.path.join(workspace, '.tpl', project)
    sys.path.append(mod_path)
    mod = __import__(project + '_settings')
    sys.path.pop()
    # Load project-specific paths.
    paths = mod.make_paths(workspace, component, qualified_name)
    # Add new files to CMake.
    extend_cmake(paths['cmake'], generate_source, generate_test)
    # Load project-specific templates.
    tpls = {}
    for tpl in ['copyright', 'header', 'source', 'test']:
        fname = os.path.join(workspace, '.tpl', project, tpl)
        if os.path.exists(fname):
            with open(fname) as f:
                tpls[tpl] = f.read()
        else:
            tpls[tpl] = ''
    # Generate files.
    tpl_replacements = mod.make_tpl_replacements(qualified_name)
    copyright = tpls['copyright'] % tpl_replacements
    if generate_header:
        make_file(paths['hpp'], copyright, tpls['header'], tpl_replacements)
    if generate_test:
        make_file(paths['tst'], copyright, tpls['test'], tpl_replacements)
    if generate_source:
        make_file(paths['cpp'], copyright, tpls['source'], tpl_replacements)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Add a new C++ class.')
    parser.add_argument('--component', help="specify the project component")
    parser.add_argument('-H', dest='no_header', action='store_true',
                        help="don't generate header file")
    parser.add_argument('-C', dest='no_cpp', action='store_true',
                        help="don't generate implementation (.cpp) file")
    parser.add_argument('-U', dest='no_test', action='store_true',
                        help="don't generate unit test file")
    parser.add_argument("name", help='fully qualified class name')
    args = parser.parse_args()
    generate_from_name(not args.no_header, not args.no_cpp, not args.no_test,
                       args.component, args.name)
